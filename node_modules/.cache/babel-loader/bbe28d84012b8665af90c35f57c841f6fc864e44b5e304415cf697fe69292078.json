{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\beedoo\\\\src\\\\components\\\\LexicalViewer.tsx\",\n  _s = $RefreshSig$();\nimport React, { useMemo } from 'react';\nimport { LexicalComposer } from '@lexical/react/LexicalComposer';\nimport { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';\nimport { ContentEditable } from '@lexical/react/LexicalContentEditable';\nimport { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin';\nimport { $getRoot, $createTextNode } from 'lexical';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LexicalViewer = ({\n  value,\n  className = ''\n}) => {\n  _s();\n  // Only set initialEditorState if value is a valid Lexical state\n  const initialEditorState = useMemo(() => {\n    if (typeof value === 'string' && value.trim().length > 0) {\n      let parsed = null;\n      try {\n        parsed = JSON.parse(value);\n      } catch {\n        // not JSON, treat as plain text\n      }\n      if (parsed && typeof parsed === 'object' && parsed.root) {\n        // Looks like a Lexical serialized state\n        return editor => {\n          editor.setEditorState(editor.parseEditorState(value));\n        };\n      } else {\n        // Fallback: treat as plain text\n        return editor => {\n          editor.update(() => {\n            const root = $getRoot();\n            root.clear();\n            root.append($createTextNode(value));\n          });\n        };\n      }\n    }\n    return undefined;\n  }, [value]);\n  const initialConfig = {\n    namespace: 'BeedooRichTextViewer',\n    theme: {\n      root: 'outline-none min-h-[40px] p-0',\n      text: {\n        bold: 'font-bold',\n        italic: 'italic',\n        underline: 'underline'\n      }\n    },\n    onError: error => {\n      console.error('Lexical error:', error);\n    },\n    editorState: null,\n    editable: false,\n    initialEditorState\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    children: /*#__PURE__*/_jsxDEV(LexicalComposer, {\n      initialConfig: initialConfig,\n      children: [/*#__PURE__*/_jsxDEV(RichTextPlugin, {\n        contentEditable: /*#__PURE__*/_jsxDEV(ContentEditable, {\n          className: \"outline-none min-h-[40px] p-0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 28\n        }, this),\n        placeholder: null,\n        ErrorBoundary: ({\n          children\n        }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: children\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(HistoryPlugin, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(LexicalViewer, \"sG/jy680mj/D24ZaC8CZTHhLiZk=\");\n_c = LexicalViewer;\nexport default LexicalViewer;\nvar _c;\n$RefreshReg$(_c, \"LexicalViewer\");","map":{"version":3,"names":["React","useMemo","LexicalComposer","RichTextPlugin","ContentEditable","HistoryPlugin","$getRoot","$createTextNode","jsxDEV","_jsxDEV","Fragment","_Fragment","LexicalViewer","value","className","_s","initialEditorState","trim","length","parsed","JSON","parse","root","editor","setEditorState","parseEditorState","update","clear","append","undefined","initialConfig","namespace","theme","text","bold","italic","underline","onError","error","console","editorState","editable","children","contentEditable","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","ErrorBoundary","_c","$RefreshReg$"],"sources":["C:/Code/beedoo/src/components/LexicalViewer.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\r\nimport { LexicalComposer } from '@lexical/react/LexicalComposer';\r\nimport { RichTextPlugin } from '@lexical/react/LexicalRichTextPlugin';\r\nimport { ContentEditable } from '@lexical/react/LexicalContentEditable';\r\nimport { HistoryPlugin } from '@lexical/react/LexicalHistoryPlugin';\r\nimport { $getRoot, $createTextNode } from 'lexical';\r\nimport type { LexicalEditor } from 'lexical';\r\n\r\ninterface LexicalViewerProps {\r\n  value: string;\r\n  className?: string;\r\n}\r\n\r\nconst LexicalViewer: React.FC<LexicalViewerProps> = ({ value, className = '' }) => {\r\n  // Only set initialEditorState if value is a valid Lexical state\r\n  const initialEditorState = useMemo(() => {\r\n    if (typeof value === 'string' && value.trim().length > 0) {\r\n      let parsed: any = null;\r\n      try {\r\n        parsed = JSON.parse(value);\r\n      } catch {\r\n        // not JSON, treat as plain text\r\n      }\r\n      if (parsed && typeof parsed === 'object' && parsed.root) {\r\n        // Looks like a Lexical serialized state\r\n        return (editor: LexicalEditor) => {\r\n          editor.setEditorState(editor.parseEditorState(value));\r\n        };\r\n      } else {\r\n        // Fallback: treat as plain text\r\n        return (editor: LexicalEditor) => {\r\n          editor.update(() => {\r\n            const root = $getRoot();\r\n            root.clear();\r\n            root.append($createTextNode(value));\r\n          });\r\n        };\r\n      }\r\n    }\r\n    return undefined;\r\n  }, [value]);\r\n\r\n  const initialConfig = {\r\n    namespace: 'BeedooRichTextViewer',\r\n    theme: {\r\n      root: 'outline-none min-h-[40px] p-0',\r\n      text: {\r\n        bold: 'font-bold',\r\n        italic: 'italic',\r\n        underline: 'underline',\r\n      },\r\n    },\r\n    onError: (error: Error) => {\r\n      console.error('Lexical error:', error);\r\n    },\r\n    editorState: null,\r\n    editable: false,\r\n    initialEditorState,\r\n  };\r\n\r\n  return (\r\n    <div className={className}>\r\n      <LexicalComposer initialConfig={initialConfig}>\r\n        <RichTextPlugin\r\n          contentEditable={<ContentEditable className=\"outline-none min-h-[40px] p-0\" />}\r\n          placeholder={null}\r\n          ErrorBoundary={({ children }) => <>{children}</>}\r\n        />\r\n        <HistoryPlugin />\r\n      </LexicalComposer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LexicalViewer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}