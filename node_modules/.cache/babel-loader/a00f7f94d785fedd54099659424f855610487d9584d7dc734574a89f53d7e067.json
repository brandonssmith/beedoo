{"ast":null,"code":"const API_BASE_URL = process.env.NODE_ENV === 'production' ? '/.netlify/functions/notes' : 'http://localhost:8888/.netlify/functions/notes';\nexport class NoteService {\n  static async loadNotes() {\n    try {\n      console.log('=== LOADING NOTES ===');\n      console.log('API URL:', API_BASE_URL);\n      const response = await fetch(API_BASE_URL, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('Load response status:', response.status, response.statusText);\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Server response:', errorText);\n        throw new Error(`Failed to load notes: ${response.status} ${response.statusText}`);\n      }\n      const notes = await response.json();\n      console.log('Raw notes from server:', notes);\n      console.log('Notes count from server:', notes.length);\n\n      // Convert date strings back to Date objects\n      const convertDates = noteList => {\n        return noteList.map(note => ({\n          ...note,\n          createdAt: new Date(note.createdAt),\n          updatedAt: new Date(note.updatedAt)\n        }));\n      };\n      const convertedNotes = convertDates(notes);\n      console.log('Converted notes:', convertedNotes);\n      console.log('Converted notes count:', convertedNotes.length);\n      return convertedNotes;\n    } catch (error) {\n      console.error('Error loading notes:', error);\n      throw error;\n    }\n  }\n  static async saveNotes(notes) {\n    try {\n      console.log('=== SAVING NOTES ===');\n      console.log('API URL:', API_BASE_URL);\n      console.log('Notes to save:', notes);\n      console.log('Notes count:', notes.length);\n      const response = await fetch(API_BASE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(notes)\n      });\n      console.log('Save response status:', response.status, response.statusText);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Server error response:', errorText);\n        throw new Error(`Failed to save notes: ${response.status} ${response.statusText} - ${errorText}`);\n      }\n      const result = await response.json();\n      console.log('Notes saved successfully:', result);\n    } catch (error) {\n      console.error('Error saving notes:', error);\n      throw error;\n    }\n  }\n  static async testConnection() {\n    try {\n      const response = await fetch(API_BASE_URL, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.ok;\n    } catch (error) {\n      console.error('Connection test failed:', error);\n      return false;\n    }\n  }\n}","map":{"version":3,"names":["API_BASE_URL","process","env","NODE_ENV","NoteService","loadNotes","console","log","response","fetch","method","headers","status","statusText","ok","errorText","text","error","Error","notes","json","length","convertDates","noteList","map","note","createdAt","Date","updatedAt","convertedNotes","saveNotes","body","JSON","stringify","Object","fromEntries","entries","result","testConnection"],"sources":["C:/Code/beedoo/src/services/noteService.ts"],"sourcesContent":["import { Note } from '../types/Note';\n\nconst API_BASE_URL = process.env.NODE_ENV === 'production' \n  ? '/.netlify/functions/notes' \n  : 'http://localhost:8888/.netlify/functions/notes';\n\nexport class NoteService {\n  static async loadNotes(): Promise<Note[]> {\n    try {\n      console.log('=== LOADING NOTES ===');\n      console.log('API URL:', API_BASE_URL);\n      \n      const response = await fetch(API_BASE_URL, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      console.log('Load response status:', response.status, response.statusText);\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Server response:', errorText);\n        throw new Error(`Failed to load notes: ${response.status} ${response.statusText}`);\n      }\n\n      const notes = await response.json();\n      console.log('Raw notes from server:', notes);\n      console.log('Notes count from server:', notes.length);\n      \n      // Convert date strings back to Date objects\n      const convertDates = (noteList: any[]): Note[] => {\n        return noteList.map(note => ({\n          ...note,\n          createdAt: new Date(note.createdAt),\n          updatedAt: new Date(note.updatedAt),\n        }));\n      };\n\n      const convertedNotes = convertDates(notes);\n      console.log('Converted notes:', convertedNotes);\n      console.log('Converted notes count:', convertedNotes.length);\n      \n      return convertedNotes;\n    } catch (error) {\n      console.error('Error loading notes:', error);\n      throw error;\n    }\n  }\n\n  static async saveNotes(notes: Note[]): Promise<void> {\n    try {\n      console.log('=== SAVING NOTES ===');\n      console.log('API URL:', API_BASE_URL);\n      console.log('Notes to save:', notes);\n      console.log('Notes count:', notes.length);\n      \n      const response = await fetch(API_BASE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(notes),\n      });\n\n      console.log('Save response status:', response.status, response.statusText);\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\n\n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Server error response:', errorText);\n        throw new Error(`Failed to save notes: ${response.status} ${response.statusText} - ${errorText}`);\n      }\n\n      const result = await response.json();\n      console.log('Notes saved successfully:', result);\n    } catch (error) {\n      console.error('Error saving notes:', error);\n      throw error;\n    }\n  }\n\n  static async testConnection(): Promise<boolean> {\n    try {\n      const response = await fetch(API_BASE_URL, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n      return response.ok;\n    } catch (error) {\n      console.error('Connection test failed:', error);\n      return false;\n    }\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}