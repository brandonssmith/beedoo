{"ast":null,"code":"/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { LinkNode, TOGGLE_LINK_COMMAND, $toggleLink } from '@lexical/link';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { mergeRegister, objectKlassEquals } from '@lexical/utils';\nimport { COMMAND_PRIORITY_LOW, PASTE_COMMAND, $getSelection, $isRangeSelection, $isElementNode } from 'lexical';\nimport { useEffect } from 'react';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction LinkPlugin({\n  validateUrl,\n  attributes\n}) {\n  const [editor] = useLexicalComposerContext();\n  useEffect(() => {\n    if (!editor.hasNodes([LinkNode])) {\n      throw new Error('LinkPlugin: LinkNode not registered on editor');\n    }\n    return mergeRegister(editor.registerCommand(TOGGLE_LINK_COMMAND, payload => {\n      if (payload === null) {\n        $toggleLink(payload);\n        return true;\n      } else if (typeof payload === 'string') {\n        if (validateUrl === undefined || validateUrl(payload)) {\n          $toggleLink(payload, attributes);\n          return true;\n        }\n        return false;\n      } else {\n        const {\n          url,\n          target,\n          rel,\n          title\n        } = payload;\n        $toggleLink(url, {\n          ...attributes,\n          rel,\n          target,\n          title\n        });\n        return true;\n      }\n    }, COMMAND_PRIORITY_LOW), validateUrl !== undefined ? editor.registerCommand(PASTE_COMMAND, event => {\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection) || selection.isCollapsed() || !objectKlassEquals(event, ClipboardEvent)) {\n        return false;\n      }\n      if (event.clipboardData === null) {\n        return false;\n      }\n      const clipboardText = event.clipboardData.getData('text');\n      if (!validateUrl(clipboardText)) {\n        return false;\n      }\n      // If we select nodes that are elements then avoid applying the link.\n      if (!selection.getNodes().some(node => $isElementNode(node))) {\n        editor.dispatchCommand(TOGGLE_LINK_COMMAND, {\n          ...attributes,\n          url: clipboardText\n        });\n        event.preventDefault();\n        return true;\n      }\n      return false;\n    }, COMMAND_PRIORITY_LOW) : () => {\n      // Don't paste arbitrary text as a link when there's no validate function\n    });\n  }, [editor, validateUrl, attributes]);\n  return null;\n}\nexport { LinkPlugin };","map":{"version":3,"names":["LinkNode","TOGGLE_LINK_COMMAND","$toggleLink","useLexicalComposerContext","mergeRegister","objectKlassEquals","COMMAND_PRIORITY_LOW","PASTE_COMMAND","$getSelection","$isRangeSelection","$isElementNode","useEffect","LinkPlugin","validateUrl","attributes","editor","hasNodes","Error","registerCommand","payload","undefined","url","target","rel","title","event","selection","isCollapsed","ClipboardEvent","clipboardData","clipboardText","getData","getNodes","some","node","dispatchCommand","preventDefault"],"sources":["C:/Code/beedoo/node_modules/@lexical/react/LexicalLinkPlugin.dev.mjs"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { LinkNode, TOGGLE_LINK_COMMAND, $toggleLink } from '@lexical/link';\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext';\nimport { mergeRegister, objectKlassEquals } from '@lexical/utils';\nimport { COMMAND_PRIORITY_LOW, PASTE_COMMAND, $getSelection, $isRangeSelection, $isElementNode } from 'lexical';\nimport { useEffect } from 'react';\n\n/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nfunction LinkPlugin({\n  validateUrl,\n  attributes\n}) {\n  const [editor] = useLexicalComposerContext();\n  useEffect(() => {\n    if (!editor.hasNodes([LinkNode])) {\n      throw new Error('LinkPlugin: LinkNode not registered on editor');\n    }\n    return mergeRegister(editor.registerCommand(TOGGLE_LINK_COMMAND, payload => {\n      if (payload === null) {\n        $toggleLink(payload);\n        return true;\n      } else if (typeof payload === 'string') {\n        if (validateUrl === undefined || validateUrl(payload)) {\n          $toggleLink(payload, attributes);\n          return true;\n        }\n        return false;\n      } else {\n        const {\n          url,\n          target,\n          rel,\n          title\n        } = payload;\n        $toggleLink(url, {\n          ...attributes,\n          rel,\n          target,\n          title\n        });\n        return true;\n      }\n    }, COMMAND_PRIORITY_LOW), validateUrl !== undefined ? editor.registerCommand(PASTE_COMMAND, event => {\n      const selection = $getSelection();\n      if (!$isRangeSelection(selection) || selection.isCollapsed() || !objectKlassEquals(event, ClipboardEvent)) {\n        return false;\n      }\n      if (event.clipboardData === null) {\n        return false;\n      }\n      const clipboardText = event.clipboardData.getData('text');\n      if (!validateUrl(clipboardText)) {\n        return false;\n      }\n      // If we select nodes that are elements then avoid applying the link.\n      if (!selection.getNodes().some(node => $isElementNode(node))) {\n        editor.dispatchCommand(TOGGLE_LINK_COMMAND, {\n          ...attributes,\n          url: clipboardText\n        });\n        event.preventDefault();\n        return true;\n      }\n      return false;\n    }, COMMAND_PRIORITY_LOW) : () => {\n      // Don't paste arbitrary text as a link when there's no validate function\n    });\n  }, [editor, validateUrl, attributes]);\n  return null;\n}\n\nexport { LinkPlugin };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,EAAEC,mBAAmB,EAAEC,WAAW,QAAQ,eAAe;AAC1E,SAASC,yBAAyB,QAAQ,uCAAuC;AACjF,SAASC,aAAa,EAAEC,iBAAiB,QAAQ,gBAAgB;AACjE,SAASC,oBAAoB,EAAEC,aAAa,EAAEC,aAAa,EAAEC,iBAAiB,EAAEC,cAAc,QAAQ,SAAS;AAC/G,SAASC,SAAS,QAAQ,OAAO;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,UAAUA,CAAC;EAClBC,WAAW;EACXC;AACF,CAAC,EAAE;EACD,MAAM,CAACC,MAAM,CAAC,GAAGZ,yBAAyB,CAAC,CAAC;EAC5CQ,SAAS,CAAC,MAAM;IACd,IAAI,CAACI,MAAM,CAACC,QAAQ,CAAC,CAAChB,QAAQ,CAAC,CAAC,EAAE;MAChC,MAAM,IAAIiB,KAAK,CAAC,+CAA+C,CAAC;IAClE;IACA,OAAOb,aAAa,CAACW,MAAM,CAACG,eAAe,CAACjB,mBAAmB,EAAEkB,OAAO,IAAI;MAC1E,IAAIA,OAAO,KAAK,IAAI,EAAE;QACpBjB,WAAW,CAACiB,OAAO,CAAC;QACpB,OAAO,IAAI;MACb,CAAC,MAAM,IAAI,OAAOA,OAAO,KAAK,QAAQ,EAAE;QACtC,IAAIN,WAAW,KAAKO,SAAS,IAAIP,WAAW,CAACM,OAAO,CAAC,EAAE;UACrDjB,WAAW,CAACiB,OAAO,EAAEL,UAAU,CAAC;UAChC,OAAO,IAAI;QACb;QACA,OAAO,KAAK;MACd,CAAC,MAAM;QACL,MAAM;UACJO,GAAG;UACHC,MAAM;UACNC,GAAG;UACHC;QACF,CAAC,GAAGL,OAAO;QACXjB,WAAW,CAACmB,GAAG,EAAE;UACf,GAAGP,UAAU;UACbS,GAAG;UACHD,MAAM;UACNE;QACF,CAAC,CAAC;QACF,OAAO,IAAI;MACb;IACF,CAAC,EAAElB,oBAAoB,CAAC,EAAEO,WAAW,KAAKO,SAAS,GAAGL,MAAM,CAACG,eAAe,CAACX,aAAa,EAAEkB,KAAK,IAAI;MACnG,MAAMC,SAAS,GAAGlB,aAAa,CAAC,CAAC;MACjC,IAAI,CAACC,iBAAiB,CAACiB,SAAS,CAAC,IAAIA,SAAS,CAACC,WAAW,CAAC,CAAC,IAAI,CAACtB,iBAAiB,CAACoB,KAAK,EAAEG,cAAc,CAAC,EAAE;QACzG,OAAO,KAAK;MACd;MACA,IAAIH,KAAK,CAACI,aAAa,KAAK,IAAI,EAAE;QAChC,OAAO,KAAK;MACd;MACA,MAAMC,aAAa,GAAGL,KAAK,CAACI,aAAa,CAACE,OAAO,CAAC,MAAM,CAAC;MACzD,IAAI,CAAClB,WAAW,CAACiB,aAAa,CAAC,EAAE;QAC/B,OAAO,KAAK;MACd;MACA;MACA,IAAI,CAACJ,SAAS,CAACM,QAAQ,CAAC,CAAC,CAACC,IAAI,CAACC,IAAI,IAAIxB,cAAc,CAACwB,IAAI,CAAC,CAAC,EAAE;QAC5DnB,MAAM,CAACoB,eAAe,CAAClC,mBAAmB,EAAE;UAC1C,GAAGa,UAAU;UACbO,GAAG,EAAES;QACP,CAAC,CAAC;QACFL,KAAK,CAACW,cAAc,CAAC,CAAC;QACtB,OAAO,IAAI;MACb;MACA,OAAO,KAAK;IACd,CAAC,EAAE9B,oBAAoB,CAAC,GAAG,MAAM;MAC/B;IAAA,CACD,CAAC;EACJ,CAAC,EAAE,CAACS,MAAM,EAAEF,WAAW,EAAEC,UAAU,CAAC,CAAC;EACrC,OAAO,IAAI;AACb;AAEA,SAASF,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}