{"ast":null,"code":"const API_BASE_URL=process.env.NODE_ENV==='production'?'/api/tasks':'http://localhost:8888/.netlify/functions/tasks';export class TaskService{static async loadTasks(){try{const response=await fetch(API_BASE_URL,{method:'GET',headers:{'Content-Type':'application/json'}});if(!response.ok){throw new Error(`Failed to load tasks: ${response.statusText}`);}const tasks=await response.json();// Convert date strings back to Date objects\nconst convertDates=taskList=>{return taskList.map(task=>({...task,createdAt:new Date(task.createdAt),updatedAt:new Date(task.updatedAt),subtasks:convertDates(task.subtasks||[]),nextSteps:convertDates(task.nextSteps||[])}));};return convertDates(tasks);}catch(error){console.error('Error loading tasks:',error);throw error;}}static async saveTasks(tasks){try{const response=await fetch(API_BASE_URL,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(tasks)});if(!response.ok){throw new Error(`Failed to save tasks: ${response.statusText}`);}const result=await response.json();console.log('Tasks saved successfully:',result);}catch(error){console.error('Error saving tasks:',error);throw error;}}static async testConnection(){try{const response=await fetch(API_BASE_URL,{method:'GET',headers:{'Content-Type':'application/json'}});return response.ok;}catch(error){console.error('Connection test failed:',error);return false;}}}","map":{"version":3,"names":["API_BASE_URL","process","env","NODE_ENV","TaskService","loadTasks","response","fetch","method","headers","ok","Error","statusText","tasks","json","convertDates","taskList","map","task","createdAt","Date","updatedAt","subtasks","nextSteps","error","console","saveTasks","body","JSON","stringify","result","log","testConnection"],"sources":["C:/Code/beedoo/src/services/taskService.ts"],"sourcesContent":["import { Task } from '../types/Task';\r\n\r\nconst API_BASE_URL = process.env.NODE_ENV === 'production' \r\n  ? '/api/tasks' \r\n  : 'http://localhost:8888/.netlify/functions/tasks';\r\n\r\nexport class TaskService {\r\n  static async loadTasks(): Promise<Task[]> {\r\n    try {\r\n      const response = await fetch(API_BASE_URL, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to load tasks: ${response.statusText}`);\r\n      }\r\n\r\n      const tasks = await response.json();\r\n      \r\n      // Convert date strings back to Date objects\r\n      const convertDates = (taskList: any[]): Task[] => {\r\n        return taskList.map(task => ({\r\n          ...task,\r\n          createdAt: new Date(task.createdAt),\r\n          updatedAt: new Date(task.updatedAt),\r\n          subtasks: convertDates(task.subtasks || []),\r\n          nextSteps: convertDates(task.nextSteps || []),\r\n        }));\r\n      };\r\n\r\n      return convertDates(tasks);\r\n    } catch (error) {\r\n      console.error('Error loading tasks:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async saveTasks(tasks: Task[]): Promise<void> {\r\n    try {\r\n      const response = await fetch(API_BASE_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(tasks),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to save tasks: ${response.statusText}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('Tasks saved successfully:', result);\r\n    } catch (error) {\r\n      console.error('Error saving tasks:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async testConnection(): Promise<boolean> {\r\n    try {\r\n      const response = await fetch(API_BASE_URL, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n      return response.ok;\r\n    } catch (error) {\r\n      console.error('Connection test failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n} "],"mappings":"AAEA,KAAM,CAAAA,YAAY,CAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,YAAY,CACtD,YAAY,CACZ,gDAAgD,CAEpD,MAAO,MAAM,CAAAC,WAAY,CACvB,YAAa,CAAAC,SAASA,CAAA,CAAoB,CACxC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACP,YAAY,CAAE,CACzCQ,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEF,GAAI,CAACH,QAAQ,CAACI,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,yBAAyBL,QAAQ,CAACM,UAAU,EAAE,CAAC,CACjE,CAEA,KAAM,CAAAC,KAAK,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CAEnC;AACA,KAAM,CAAAC,YAAY,CAAIC,QAAe,EAAa,CAChD,MAAO,CAAAA,QAAQ,CAACC,GAAG,CAACC,IAAI,GAAK,CAC3B,GAAGA,IAAI,CACPC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACF,IAAI,CAACC,SAAS,CAAC,CACnCE,SAAS,CAAE,GAAI,CAAAD,IAAI,CAACF,IAAI,CAACG,SAAS,CAAC,CACnCC,QAAQ,CAAEP,YAAY,CAACG,IAAI,CAACI,QAAQ,EAAI,EAAE,CAAC,CAC3CC,SAAS,CAAER,YAAY,CAACG,IAAI,CAACK,SAAS,EAAI,EAAE,CAC9C,CAAC,CAAC,CAAC,CACL,CAAC,CAED,MAAO,CAAAR,YAAY,CAACF,KAAK,CAAC,CAC5B,CAAE,MAAOW,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,KAAM,CAAAA,KAAK,CACb,CACF,CAEA,YAAa,CAAAE,SAASA,CAACb,KAAa,CAAiB,CACnD,GAAI,CACF,KAAM,CAAAP,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACP,YAAY,CAAE,CACzCQ,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDkB,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAChB,KAAK,CAC5B,CAAC,CAAC,CAEF,GAAI,CAACP,QAAQ,CAACI,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,yBAAyBL,QAAQ,CAACM,UAAU,EAAE,CAAC,CACjE,CAEA,KAAM,CAAAkB,MAAM,CAAG,KAAM,CAAAxB,QAAQ,CAACQ,IAAI,CAAC,CAAC,CACpCW,OAAO,CAACM,GAAG,CAAC,2BAA2B,CAAED,MAAM,CAAC,CAClD,CAAE,MAAON,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAAC,CAC3C,KAAM,CAAAA,KAAK,CACb,CACF,CAEA,YAAa,CAAAQ,cAAcA,CAAA,CAAqB,CAC9C,GAAI,CACF,KAAM,CAAA1B,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACP,YAAY,CAAE,CACzCQ,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CACF,MAAO,CAAAH,QAAQ,CAACI,EAAE,CACpB,CAAE,MAAOc,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/C,MAAO,MAAK,CACd,CACF,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}