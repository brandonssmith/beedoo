{"ast":null,"code":"export const calculateNoteStats = notes => {\n  const totalNotes = notes.length;\n\n  // Get all unique tags\n  const allTags = new Set();\n  notes.forEach(note => {\n    note.tags.forEach(tag => allTags.add(tag));\n  });\n  const totalTags = allTags.size;\n\n  // Calculate average notes per day (last 30 days)\n  const thirtyDaysAgo = new Date();\n  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n  const recentNotes = notes.filter(note => new Date(note.createdAt) >= thirtyDaysAgo);\n  const averageNotesPerDay = totalNotes > 0 ? recentNotes.length / 30 : 0;\n  return {\n    totalNotes,\n    totalTags,\n    averageNotesPerDay: Math.round(averageNotesPerDay * 100) / 100\n  };\n};\nexport const searchNotes = (noteList, query) => {\n  if (!query.trim()) return noteList;\n  const searchLower = query.toLowerCase();\n  return noteList.filter(note => {\n    const matchesTitle = note.title.toLowerCase().includes(searchLower);\n    const matchesContent = note.content.toLowerCase().includes(searchLower);\n    const matchesTags = note.tags.some(tag => tag.toLowerCase().includes(searchLower));\n    return matchesTitle || matchesContent || matchesTags;\n  });\n};\nexport const filterNotesByTag = (notes, tag) => {\n  if (!tag || tag === 'all') return notes;\n  return notes.filter(note => note.tags.some(noteTag => noteTag.toLowerCase() === tag.toLowerCase()));\n};\nexport const getAllTags = notes => {\n  const allTags = new Set();\n  notes.forEach(note => {\n    note.tags.forEach(tag => allTags.add(tag));\n  });\n  return Array.from(allTags).sort();\n};","map":{"version":3,"names":["calculateNoteStats","notes","totalNotes","length","allTags","Set","forEach","note","tags","tag","add","totalTags","size","thirtyDaysAgo","Date","setDate","getDate","recentNotes","filter","createdAt","averageNotesPerDay","Math","round","searchNotes","noteList","query","trim","searchLower","toLowerCase","matchesTitle","title","includes","matchesContent","content","matchesTags","some","filterNotesByTag","noteTag","getAllTags","Array","from","sort"],"sources":["C:/Code/beedoo/src/utils/noteUtils.ts"],"sourcesContent":["import { Note, NoteStatistics } from '../types/Note';\r\n\r\nexport const calculateNoteStats = (notes: Note[]): NoteStatistics => {\r\n  const totalNotes = notes.length;\r\n  \r\n  // Get all unique tags\r\n  const allTags = new Set<string>();\r\n  notes.forEach(note => {\r\n    note.tags.forEach(tag => allTags.add(tag));\r\n  });\r\n  const totalTags = allTags.size;\r\n  \r\n  // Calculate average notes per day (last 30 days)\r\n  const thirtyDaysAgo = new Date();\r\n  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n  \r\n  const recentNotes = notes.filter(note => \r\n    new Date(note.createdAt) >= thirtyDaysAgo\r\n  );\r\n  \r\n  const averageNotesPerDay = totalNotes > 0 ? (recentNotes.length / 30) : 0;\r\n  \r\n  return {\r\n    totalNotes,\r\n    totalTags,\r\n    averageNotesPerDay: Math.round(averageNotesPerDay * 100) / 100\r\n  };\r\n};\r\n\r\nexport const searchNotes = (noteList: Note[], query: string): Note[] => {\r\n  if (!query.trim()) return noteList;\r\n  \r\n  const searchLower = query.toLowerCase();\r\n  \r\n  return noteList.filter(note => {\r\n    const matchesTitle = note.title.toLowerCase().includes(searchLower);\r\n    const matchesContent = note.content.toLowerCase().includes(searchLower);\r\n    const matchesTags = note.tags.some(tag => \r\n      tag.toLowerCase().includes(searchLower)\r\n    );\r\n    \r\n    return matchesTitle || matchesContent || matchesTags;\r\n  });\r\n};\r\n\r\nexport const filterNotesByTag = (notes: Note[], tag: string): Note[] => {\r\n  if (!tag || tag === 'all') return notes;\r\n  \r\n  return notes.filter(note => \r\n    note.tags.some(noteTag => \r\n      noteTag.toLowerCase() === tag.toLowerCase()\r\n    )\r\n  );\r\n};\r\n\r\nexport const getAllTags = (notes: Note[]): string[] => {\r\n  const allTags = new Set<string>();\r\n  notes.forEach(note => {\r\n    note.tags.forEach(tag => allTags.add(tag));\r\n  });\r\n  return Array.from(allTags).sort();\r\n}; "],"mappings":"AAEA,OAAO,MAAMA,kBAAkB,GAAIC,KAAa,IAAqB;EACnE,MAAMC,UAAU,GAAGD,KAAK,CAACE,MAAM;;EAE/B;EACA,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAS,CAAC;EACjCJ,KAAK,CAACK,OAAO,CAACC,IAAI,IAAI;IACpBA,IAAI,CAACC,IAAI,CAACF,OAAO,CAACG,GAAG,IAAIL,OAAO,CAACM,GAAG,CAACD,GAAG,CAAC,CAAC;EAC5C,CAAC,CAAC;EACF,MAAME,SAAS,GAAGP,OAAO,CAACQ,IAAI;;EAE9B;EACA,MAAMC,aAAa,GAAG,IAAIC,IAAI,CAAC,CAAC;EAChCD,aAAa,CAACE,OAAO,CAACF,aAAa,CAACG,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC;EAEnD,MAAMC,WAAW,GAAGhB,KAAK,CAACiB,MAAM,CAACX,IAAI,IACnC,IAAIO,IAAI,CAACP,IAAI,CAACY,SAAS,CAAC,IAAIN,aAC9B,CAAC;EAED,MAAMO,kBAAkB,GAAGlB,UAAU,GAAG,CAAC,GAAIe,WAAW,CAACd,MAAM,GAAG,EAAE,GAAI,CAAC;EAEzE,OAAO;IACLD,UAAU;IACVS,SAAS;IACTS,kBAAkB,EAAEC,IAAI,CAACC,KAAK,CAACF,kBAAkB,GAAG,GAAG,CAAC,GAAG;EAC7D,CAAC;AACH,CAAC;AAED,OAAO,MAAMG,WAAW,GAAGA,CAACC,QAAgB,EAAEC,KAAa,KAAa;EACtE,IAAI,CAACA,KAAK,CAACC,IAAI,CAAC,CAAC,EAAE,OAAOF,QAAQ;EAElC,MAAMG,WAAW,GAAGF,KAAK,CAACG,WAAW,CAAC,CAAC;EAEvC,OAAOJ,QAAQ,CAACN,MAAM,CAACX,IAAI,IAAI;IAC7B,MAAMsB,YAAY,GAAGtB,IAAI,CAACuB,KAAK,CAACF,WAAW,CAAC,CAAC,CAACG,QAAQ,CAACJ,WAAW,CAAC;IACnE,MAAMK,cAAc,GAAGzB,IAAI,CAAC0B,OAAO,CAACL,WAAW,CAAC,CAAC,CAACG,QAAQ,CAACJ,WAAW,CAAC;IACvE,MAAMO,WAAW,GAAG3B,IAAI,CAACC,IAAI,CAAC2B,IAAI,CAAC1B,GAAG,IACpCA,GAAG,CAACmB,WAAW,CAAC,CAAC,CAACG,QAAQ,CAACJ,WAAW,CACxC,CAAC;IAED,OAAOE,YAAY,IAAIG,cAAc,IAAIE,WAAW;EACtD,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAME,gBAAgB,GAAGA,CAACnC,KAAa,EAAEQ,GAAW,KAAa;EACtE,IAAI,CAACA,GAAG,IAAIA,GAAG,KAAK,KAAK,EAAE,OAAOR,KAAK;EAEvC,OAAOA,KAAK,CAACiB,MAAM,CAACX,IAAI,IACtBA,IAAI,CAACC,IAAI,CAAC2B,IAAI,CAACE,OAAO,IACpBA,OAAO,CAACT,WAAW,CAAC,CAAC,KAAKnB,GAAG,CAACmB,WAAW,CAAC,CAC5C,CACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMU,UAAU,GAAIrC,KAAa,IAAe;EACrD,MAAMG,OAAO,GAAG,IAAIC,GAAG,CAAS,CAAC;EACjCJ,KAAK,CAACK,OAAO,CAACC,IAAI,IAAI;IACpBA,IAAI,CAACC,IAAI,CAACF,OAAO,CAACG,GAAG,IAAIL,OAAO,CAACM,GAAG,CAACD,GAAG,CAAC,CAAC;EAC5C,CAAC,CAAC;EACF,OAAO8B,KAAK,CAACC,IAAI,CAACpC,OAAO,CAAC,CAACqC,IAAI,CAAC,CAAC;AACnC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}