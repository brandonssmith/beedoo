{"ast":null,"code":"var _jsxFileName = \"C:\\\\Code\\\\beedoo\\\\src\\\\components\\\\RichTextDisplay.tsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RichTextDisplay = ({\n  content,\n  className = \"\"\n}) => {\n  // Simple function to convert plain text with basic formatting to HTML\n  const formatContent = text => {\n    if (!text) return '';\n\n    // Convert basic markdown-style formatting\n    let formatted = text\n    // Bold: **text** or __text__\n    .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>').replace(/__(.*?)__/g, '<strong>$1</strong>')\n    // Italic: *text* or _text_\n    .replace(/\\*(.*?)\\*/g, '<em>$1</em>').replace(/_(.*?)_/g, '<em>$1</em>')\n    // Underline: ~text~\n    .replace(/~(.*?)~/g, '<u>$1</u>')\n    // Headers: # Header, ## Subheader, ### Subsubheader\n    .replace(/^# (.*$)/gm, '<h1 class=\"text-2xl font-bold mb-2\">$1</h1>').replace(/^## (.*$)/gm, '<h2 class=\"text-xl font-bold mb-2\">$1</h2>').replace(/^### (.*$)/gm, '<h3 class=\"text-lg font-bold mb-1\">$1</h3>')\n    // Alignment markers\n    .replace(/ \\[CENTER\\] /g, '<div class=\"text-center\">').replace(/ \\[RIGHT\\] /g, '<div class=\"text-right\">')\n    // Markdown-style links: [text](url)\n    .replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-600 underline hover:text-blue-800\">$1</a>')\n    // URLs: convert to clickable links (fallback for plain URLs)\n    .replace(/(https?:\\/\\/[^\\s]+)/g, '<a href=\"$1\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-600 underline hover:text-blue-800\">$1</a>')\n    // www. URLs: convert to clickable links (prepend https://)\n    .replace(/(www\\.[^\\s]+\\.[^\\s]+)/g, '<a href=\"https://$1\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-600 underline hover:text-blue-800\">$1</a>')\n    // Line breaks\n    .replace(/\\n/g, '<br>');\n\n    // Handle alignment divs properly\n    formatted = formatted.replace(/<div class=\"text-center\">(.*?)<br>/g, '<div class=\"text-center\">$1</div>').replace(/<div class=\"text-right\">(.*?)<br>/g, '<div class=\"text-right\">$1</div>');\n    return formatted;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: className,\n    dangerouslySetInnerHTML: {\n      __html: formatContent(content)\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_c = RichTextDisplay;\nexport default RichTextDisplay;\nvar _c;\n$RefreshReg$(_c, \"RichTextDisplay\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","RichTextDisplay","content","className","formatContent","text","formatted","replace","dangerouslySetInnerHTML","__html","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Code/beedoo/src/components/RichTextDisplay.tsx"],"sourcesContent":["import React from 'react';\r\n\r\ninterface RichTextDisplayProps {\r\n  content: string;\r\n  className?: string;\r\n}\r\n\r\nconst RichTextDisplay: React.FC<RichTextDisplayProps> = ({ content, className = \"\" }) => {\r\n  // Simple function to convert plain text with basic formatting to HTML\r\n  const formatContent = (text: string): string => {\r\n    if (!text) return '';\r\n    \r\n    // Convert basic markdown-style formatting\r\n    let formatted = text\r\n      // Bold: **text** or __text__\r\n      .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\r\n      .replace(/__(.*?)__/g, '<strong>$1</strong>')\r\n      // Italic: *text* or _text_\r\n      .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\r\n      .replace(/_(.*?)_/g, '<em>$1</em>')\r\n      // Underline: ~text~\r\n      .replace(/~(.*?)~/g, '<u>$1</u>')\r\n      // Headers: # Header, ## Subheader, ### Subsubheader\r\n      .replace(/^# (.*$)/gm, '<h1 class=\"text-2xl font-bold mb-2\">$1</h1>')\r\n      .replace(/^## (.*$)/gm, '<h2 class=\"text-xl font-bold mb-2\">$1</h2>')\r\n      .replace(/^### (.*$)/gm, '<h3 class=\"text-lg font-bold mb-1\">$1</h3>')\r\n      // Alignment markers\r\n      .replace(/ \\[CENTER\\] /g, '<div class=\"text-center\">')\r\n      .replace(/ \\[RIGHT\\] /g, '<div class=\"text-right\">')\r\n      // Markdown-style links: [text](url)\r\n      .replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-600 underline hover:text-blue-800\">$1</a>')\r\n      // URLs: convert to clickable links (fallback for plain URLs)\r\n      .replace(/(https?:\\/\\/[^\\s]+)/g, '<a href=\"$1\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-600 underline hover:text-blue-800\">$1</a>')\r\n      // www. URLs: convert to clickable links (prepend https://)\r\n      .replace(/(www\\.[^\\s]+\\.[^\\s]+)/g, '<a href=\"https://$1\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-600 underline hover:text-blue-800\">$1</a>')\r\n      // Line breaks\r\n      .replace(/\\n/g, '<br>');\r\n\r\n    // Handle alignment divs properly\r\n    formatted = formatted\r\n      .replace(/<div class=\"text-center\">(.*?)<br>/g, '<div class=\"text-center\">$1</div>')\r\n      .replace(/<div class=\"text-right\">(.*?)<br>/g, '<div class=\"text-right\">$1</div>');\r\n\r\n    return formatted;\r\n  };\r\n\r\n  return (\r\n    <div \r\n      className={className}\r\n      dangerouslySetInnerHTML={{ __html: formatContent(content) }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RichTextDisplay; "],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAO1B,MAAMC,eAA+C,GAAGA,CAAC;EAAEC,OAAO;EAAEC,SAAS,GAAG;AAAG,CAAC,KAAK;EACvF;EACA,MAAMC,aAAa,GAAIC,IAAY,IAAa;IAC9C,IAAI,CAACA,IAAI,EAAE,OAAO,EAAE;;IAEpB;IACA,IAAIC,SAAS,GAAGD;IACd;IAAA,CACCE,OAAO,CAAC,gBAAgB,EAAE,qBAAqB,CAAC,CAChDA,OAAO,CAAC,YAAY,EAAE,qBAAqB;IAC5C;IAAA,CACCA,OAAO,CAAC,YAAY,EAAE,aAAa,CAAC,CACpCA,OAAO,CAAC,UAAU,EAAE,aAAa;IAClC;IAAA,CACCA,OAAO,CAAC,UAAU,EAAE,WAAW;IAChC;IAAA,CACCA,OAAO,CAAC,YAAY,EAAE,6CAA6C,CAAC,CACpEA,OAAO,CAAC,aAAa,EAAE,4CAA4C,CAAC,CACpEA,OAAO,CAAC,cAAc,EAAE,4CAA4C;IACrE;IAAA,CACCA,OAAO,CAAC,eAAe,EAAE,2BAA2B,CAAC,CACrDA,OAAO,CAAC,cAAc,EAAE,0BAA0B;IACnD;IAAA,CACCA,OAAO,CAAC,0BAA0B,EAAE,mHAAmH;IACxJ;IAAA,CACCA,OAAO,CAAC,sBAAsB,EAAE,mHAAmH;IACpJ;IAAA,CACCA,OAAO,CAAC,wBAAwB,EAAE,2HAA2H;IAC9J;IAAA,CACCA,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC;;IAEzB;IACAD,SAAS,GAAGA,SAAS,CAClBC,OAAO,CAAC,qCAAqC,EAAE,mCAAmC,CAAC,CACnFA,OAAO,CAAC,oCAAoC,EAAE,kCAAkC,CAAC;IAEpF,OAAOD,SAAS;EAClB,CAAC;EAED,oBACEN,OAAA;IACEG,SAAS,EAAEA,SAAU;IACrBK,uBAAuB,EAAE;MAAEC,MAAM,EAAEL,aAAa,CAACF,OAAO;IAAE;EAAE;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC7D,CAAC;AAEN,CAAC;AAACC,EAAA,GA7CIb,eAA+C;AA+CrD,eAAeA,eAAe;AAAC,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}