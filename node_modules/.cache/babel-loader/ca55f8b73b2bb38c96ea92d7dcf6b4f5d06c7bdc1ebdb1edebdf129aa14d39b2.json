{"ast":null,"code":"export const exportTasksToFile = (tasks, filename) => {\n  const dataStr = JSON.stringify(tasks, null, 2);\n  const dataBlob = new Blob([dataStr], {\n    type: 'application/json'\n  });\n  const link = document.createElement('a');\n  link.href = URL.createObjectURL(dataBlob);\n  link.download = filename || `beedoo-tasks-${new Date().toISOString().split('T')[0]}.json`;\n  link.click();\n  URL.revokeObjectURL(link.href);\n};\nexport const importTasksFromFile = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = event => {\n      try {\n        var _event$target;\n        const content = (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.result;\n        const tasks = JSON.parse(content);\n\n        // Validate that it's an array of tasks\n        if (!Array.isArray(tasks)) {\n          throw new Error('File does not contain a valid task array');\n        }\n\n        // Convert date strings back to Date objects\n        const convertDates = taskList => {\n          return taskList.map(task => ({\n            ...task,\n            createdAt: new Date(task.createdAt),\n            updatedAt: new Date(task.updatedAt),\n            subtasks: convertDates(task.subtasks || []),\n            nextSteps: convertDates(task.nextSteps || [])\n          }));\n        };\n        const convertedTasks = convertDates(tasks);\n        resolve(convertedTasks);\n      } catch (error) {\n        reject(new Error('Invalid file format. Please select a valid Beedoo task file.'));\n      }\n    };\n    reader.onerror = () => {\n      reject(new Error('Failed to read file'));\n    };\n    reader.readAsText(file);\n  });\n};\nexport const validateTaskFile = file => {\n  const validExtensions = ['.json'];\n  const fileName = file.name.toLowerCase();\n  return validExtensions.some(ext => fileName.endsWith(ext));\n};","map":{"version":3,"names":["exportTasksToFile","tasks","filename","dataStr","JSON","stringify","dataBlob","Blob","type","link","document","createElement","href","URL","createObjectURL","download","Date","toISOString","split","click","revokeObjectURL","importTasksFromFile","file","Promise","resolve","reject","reader","FileReader","onload","event","_event$target","content","target","result","parse","Array","isArray","Error","convertDates","taskList","map","task","createdAt","updatedAt","subtasks","nextSteps","convertedTasks","error","onerror","readAsText","validateTaskFile","validExtensions","fileName","name","toLowerCase","some","ext","endsWith"],"sources":["C:/Code/beedoo/src/utils/fileUtils.ts"],"sourcesContent":["import { Task } from '../types/Task';\r\n\r\nexport const exportTasksToFile = (tasks: Task[], filename?: string): void => {\r\n  const dataStr = JSON.stringify(tasks, null, 2);\r\n  const dataBlob = new Blob([dataStr], { type: 'application/json' });\r\n  \r\n  const link = document.createElement('a');\r\n  link.href = URL.createObjectURL(dataBlob);\r\n  link.download = filename || `beedoo-tasks-${new Date().toISOString().split('T')[0]}.json`;\r\n  link.click();\r\n  \r\n  URL.revokeObjectURL(link.href);\r\n};\r\n\r\nexport const importTasksFromFile = (file: File): Promise<Task[]> => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    \r\n    reader.onload = (event) => {\r\n      try {\r\n        const content = event.target?.result as string;\r\n        const tasks = JSON.parse(content);\r\n        \r\n        // Validate that it's an array of tasks\r\n        if (!Array.isArray(tasks)) {\r\n          throw new Error('File does not contain a valid task array');\r\n        }\r\n        \r\n        // Convert date strings back to Date objects\r\n        const convertDates = (taskList: any[]): Task[] => {\r\n          return taskList.map(task => ({\r\n            ...task,\r\n            createdAt: new Date(task.createdAt),\r\n            updatedAt: new Date(task.updatedAt),\r\n            subtasks: convertDates(task.subtasks || []),\r\n            nextSteps: convertDates(task.nextSteps || []),\r\n          }));\r\n        };\r\n        \r\n        const convertedTasks = convertDates(tasks);\r\n        resolve(convertedTasks);\r\n      } catch (error) {\r\n        reject(new Error('Invalid file format. Please select a valid Beedoo task file.'));\r\n      }\r\n    };\r\n    \r\n    reader.onerror = () => {\r\n      reject(new Error('Failed to read file'));\r\n    };\r\n    \r\n    reader.readAsText(file);\r\n  });\r\n};\r\n\r\nexport const validateTaskFile = (file: File): boolean => {\r\n  const validExtensions = ['.json'];\r\n  const fileName = file.name.toLowerCase();\r\n  \r\n  return validExtensions.some(ext => fileName.endsWith(ext));\r\n}; "],"mappings":"AAEA,OAAO,MAAMA,iBAAiB,GAAGA,CAACC,KAAa,EAAEC,QAAiB,KAAW;EAC3E,MAAMC,OAAO,GAAGC,IAAI,CAACC,SAAS,CAACJ,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;EAC9C,MAAMK,QAAQ,GAAG,IAAIC,IAAI,CAAC,CAACJ,OAAO,CAAC,EAAE;IAAEK,IAAI,EAAE;EAAmB,CAAC,CAAC;EAElE,MAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;EACxCF,IAAI,CAACG,IAAI,GAAGC,GAAG,CAACC,eAAe,CAACR,QAAQ,CAAC;EACzCG,IAAI,CAACM,QAAQ,GAAGb,QAAQ,IAAI,gBAAgB,IAAIc,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO;EACzFT,IAAI,CAACU,KAAK,CAAC,CAAC;EAEZN,GAAG,CAACO,eAAe,CAACX,IAAI,CAACG,IAAI,CAAC;AAChC,CAAC;AAED,OAAO,MAAMS,mBAAmB,GAAIC,IAAU,IAAsB;EAClE,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;IAE/BD,MAAM,CAACE,MAAM,GAAIC,KAAK,IAAK;MACzB,IAAI;QAAA,IAAAC,aAAA;QACF,MAAMC,OAAO,IAAAD,aAAA,GAAGD,KAAK,CAACG,MAAM,cAAAF,aAAA,uBAAZA,aAAA,CAAcG,MAAgB;QAC9C,MAAMhC,KAAK,GAAGG,IAAI,CAAC8B,KAAK,CAACH,OAAO,CAAC;;QAEjC;QACA,IAAI,CAACI,KAAK,CAACC,OAAO,CAACnC,KAAK,CAAC,EAAE;UACzB,MAAM,IAAIoC,KAAK,CAAC,0CAA0C,CAAC;QAC7D;;QAEA;QACA,MAAMC,YAAY,GAAIC,QAAe,IAAa;UAChD,OAAOA,QAAQ,CAACC,GAAG,CAACC,IAAI,KAAK;YAC3B,GAAGA,IAAI;YACPC,SAAS,EAAE,IAAI1B,IAAI,CAACyB,IAAI,CAACC,SAAS,CAAC;YACnCC,SAAS,EAAE,IAAI3B,IAAI,CAACyB,IAAI,CAACE,SAAS,CAAC;YACnCC,QAAQ,EAAEN,YAAY,CAACG,IAAI,CAACG,QAAQ,IAAI,EAAE,CAAC;YAC3CC,SAAS,EAAEP,YAAY,CAACG,IAAI,CAACI,SAAS,IAAI,EAAE;UAC9C,CAAC,CAAC,CAAC;QACL,CAAC;QAED,MAAMC,cAAc,GAAGR,YAAY,CAACrC,KAAK,CAAC;QAC1CuB,OAAO,CAACsB,cAAc,CAAC;MACzB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdtB,MAAM,CAAC,IAAIY,KAAK,CAAC,8DAA8D,CAAC,CAAC;MACnF;IACF,CAAC;IAEDX,MAAM,CAACsB,OAAO,GAAG,MAAM;MACrBvB,MAAM,CAAC,IAAIY,KAAK,CAAC,qBAAqB,CAAC,CAAC;IAC1C,CAAC;IAEDX,MAAM,CAACuB,UAAU,CAAC3B,IAAI,CAAC;EACzB,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAM4B,gBAAgB,GAAI5B,IAAU,IAAc;EACvD,MAAM6B,eAAe,GAAG,CAAC,OAAO,CAAC;EACjC,MAAMC,QAAQ,GAAG9B,IAAI,CAAC+B,IAAI,CAACC,WAAW,CAAC,CAAC;EAExC,OAAOH,eAAe,CAACI,IAAI,CAACC,GAAG,IAAIJ,QAAQ,CAACK,QAAQ,CAACD,GAAG,CAAC,CAAC;AAC5D,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}