{"ast":null,"code":"export const exportTasksToFile=(tasks,filename)=>{const dataStr=JSON.stringify(tasks,null,2);const dataBlob=new Blob([dataStr],{type:'application/json'});const link=document.createElement('a');link.href=URL.createObjectURL(dataBlob);link.download=filename||`beedoo-tasks-${new Date().toISOString().split('T')[0]}.json`;link.click();URL.revokeObjectURL(link.href);};export const importTasksFromFile=file=>{return new Promise((resolve,reject)=>{const reader=new FileReader();reader.onload=event=>{try{var _event$target;const content=(_event$target=event.target)===null||_event$target===void 0?void 0:_event$target.result;const tasks=JSON.parse(content);// Validate that it's an array of tasks\nif(!Array.isArray(tasks)){throw new Error('File does not contain a valid task array');}// Convert date strings back to Date objects\nconst convertDates=taskList=>{return taskList.map(task=>({...task,createdAt:new Date(task.createdAt),updatedAt:new Date(task.updatedAt),subtasks:convertDates(task.subtasks||[]),nextSteps:convertDates(task.nextSteps||[])}));};const convertedTasks=convertDates(tasks);resolve(convertedTasks);}catch(error){reject(new Error('Invalid file format. Please select a valid Beedoo task file.'));}};reader.onerror=()=>{reject(new Error('Failed to read file'));};reader.readAsText(file);});};export const validateTaskFile=file=>{const validExtensions=['.json'];const fileName=file.name.toLowerCase();return validExtensions.some(ext=>fileName.endsWith(ext));};// Note file utilities\nexport const exportNotesToFile=(notes,filename)=>{const dataStr=JSON.stringify(notes,null,2);const dataBlob=new Blob([dataStr],{type:'application/json'});const link=document.createElement('a');link.href=URL.createObjectURL(dataBlob);link.download=filename||`beedoo-notes-${new Date().toISOString().split('T')[0]}.json`;link.click();URL.revokeObjectURL(link.href);};export const importNotesFromFile=file=>{return new Promise((resolve,reject)=>{const reader=new FileReader();reader.onload=event=>{try{var _event$target2;const content=(_event$target2=event.target)===null||_event$target2===void 0?void 0:_event$target2.result;const notes=JSON.parse(content);// Validate that it's an array of notes\nif(!Array.isArray(notes)){throw new Error('File does not contain a valid note array');}// Convert date strings back to Date objects\nconst convertDates=noteList=>{return noteList.map(note=>({...note,createdAt:new Date(note.createdAt),updatedAt:new Date(note.updatedAt)}));};const convertedNotes=convertDates(notes);resolve(convertedNotes);}catch(error){reject(new Error('Invalid file format. Please select a valid Beedoo note file.'));}};reader.onerror=()=>{reject(new Error('Failed to read file'));};reader.readAsText(file);});};export const validateNoteFile=file=>{const validExtensions=['.json'];const fileName=file.name.toLowerCase();return validExtensions.some(ext=>fileName.endsWith(ext));};","map":{"version":3,"names":["exportTasksToFile","tasks","filename","dataStr","JSON","stringify","dataBlob","Blob","type","link","document","createElement","href","URL","createObjectURL","download","Date","toISOString","split","click","revokeObjectURL","importTasksFromFile","file","Promise","resolve","reject","reader","FileReader","onload","event","_event$target","content","target","result","parse","Array","isArray","Error","convertDates","taskList","map","task","createdAt","updatedAt","subtasks","nextSteps","convertedTasks","error","onerror","readAsText","validateTaskFile","validExtensions","fileName","name","toLowerCase","some","ext","endsWith","exportNotesToFile","notes","importNotesFromFile","_event$target2","noteList","note","convertedNotes","validateNoteFile"],"sources":["C:/Code/beedoo/src/utils/fileUtils.ts"],"sourcesContent":["import { Task } from '../types/Task';\r\nimport { Note } from '../types/Note';\r\n\r\nexport const exportTasksToFile = (tasks: Task[], filename?: string): void => {\r\n  const dataStr = JSON.stringify(tasks, null, 2);\r\n  const dataBlob = new Blob([dataStr], { type: 'application/json' });\r\n  \r\n  const link = document.createElement('a');\r\n  link.href = URL.createObjectURL(dataBlob);\r\n  link.download = filename || `beedoo-tasks-${new Date().toISOString().split('T')[0]}.json`;\r\n  link.click();\r\n  \r\n  URL.revokeObjectURL(link.href);\r\n};\r\n\r\nexport const importTasksFromFile = (file: File): Promise<Task[]> => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    \r\n    reader.onload = (event) => {\r\n      try {\r\n        const content = event.target?.result as string;\r\n        const tasks = JSON.parse(content);\r\n        \r\n        // Validate that it's an array of tasks\r\n        if (!Array.isArray(tasks)) {\r\n          throw new Error('File does not contain a valid task array');\r\n        }\r\n        \r\n        // Convert date strings back to Date objects\r\n        const convertDates = (taskList: any[]): Task[] => {\r\n          return taskList.map(task => ({\r\n            ...task,\r\n            createdAt: new Date(task.createdAt),\r\n            updatedAt: new Date(task.updatedAt),\r\n            subtasks: convertDates(task.subtasks || []),\r\n            nextSteps: convertDates(task.nextSteps || []),\r\n          }));\r\n        };\r\n        \r\n        const convertedTasks = convertDates(tasks);\r\n        resolve(convertedTasks);\r\n      } catch (error) {\r\n        reject(new Error('Invalid file format. Please select a valid Beedoo task file.'));\r\n      }\r\n    };\r\n    \r\n    reader.onerror = () => {\r\n      reject(new Error('Failed to read file'));\r\n    };\r\n    \r\n    reader.readAsText(file);\r\n  });\r\n};\r\n\r\nexport const validateTaskFile = (file: File): boolean => {\r\n  const validExtensions = ['.json'];\r\n  const fileName = file.name.toLowerCase();\r\n  \r\n  return validExtensions.some(ext => fileName.endsWith(ext));\r\n};\r\n\r\n// Note file utilities\r\nexport const exportNotesToFile = (notes: Note[], filename?: string): void => {\r\n  const dataStr = JSON.stringify(notes, null, 2);\r\n  const dataBlob = new Blob([dataStr], { type: 'application/json' });\r\n  \r\n  const link = document.createElement('a');\r\n  link.href = URL.createObjectURL(dataBlob);\r\n  link.download = filename || `beedoo-notes-${new Date().toISOString().split('T')[0]}.json`;\r\n  link.click();\r\n  \r\n  URL.revokeObjectURL(link.href);\r\n};\r\n\r\nexport const importNotesFromFile = (file: File): Promise<Note[]> => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    \r\n    reader.onload = (event) => {\r\n      try {\r\n        const content = event.target?.result as string;\r\n        const notes = JSON.parse(content);\r\n        \r\n        // Validate that it's an array of notes\r\n        if (!Array.isArray(notes)) {\r\n          throw new Error('File does not contain a valid note array');\r\n        }\r\n        \r\n        // Convert date strings back to Date objects\r\n        const convertDates = (noteList: any[]): Note[] => {\r\n          return noteList.map(note => ({\r\n            ...note,\r\n            createdAt: new Date(note.createdAt),\r\n            updatedAt: new Date(note.updatedAt),\r\n          }));\r\n        };\r\n        \r\n        const convertedNotes = convertDates(notes);\r\n        resolve(convertedNotes);\r\n      } catch (error) {\r\n        reject(new Error('Invalid file format. Please select a valid Beedoo note file.'));\r\n      }\r\n    };\r\n    \r\n    reader.onerror = () => {\r\n      reject(new Error('Failed to read file'));\r\n    };\r\n    \r\n    reader.readAsText(file);\r\n  });\r\n};\r\n\r\nexport const validateNoteFile = (file: File): boolean => {\r\n  const validExtensions = ['.json'];\r\n  const fileName = file.name.toLowerCase();\r\n  \r\n  return validExtensions.some(ext => fileName.endsWith(ext));\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}