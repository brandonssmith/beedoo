{"ast":null,"code":"import React from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const RichTextDisplay=_ref=>{let{content,className=\"\"}=_ref;// Simple function to convert plain text with basic formatting to HTML\nconst formatContent=text=>{if(!text)return'';// Convert basic markdown-style formatting\nlet formatted=text// Bold: **text** or __text__\n.replace(/\\*\\*(.*?)\\*\\*/g,'<strong>$1</strong>').replace(/__(.*?)__/g,'<strong>$1</strong>')// Italic: *text* or _text_\n.replace(/\\*(.*?)\\*/g,'<em>$1</em>').replace(/_(.*?)_/g,'<em>$1</em>')// Underline: ~text~\n.replace(/~(.*?)~/g,'<u>$1</u>')// URLs: convert to clickable links\n.replace(/(https?:\\/\\/[^\\s]+)/g,'<a href=\"$1\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-600 underline hover:text-blue-800\">$1</a>')// Line breaks\n.replace(/\\n/g,'<br>');return formatted;};return/*#__PURE__*/_jsx(\"div\",{className:className,dangerouslySetInnerHTML:{__html:formatContent(content)}});};export default RichTextDisplay;","map":{"version":3,"names":["React","jsx","_jsx","RichTextDisplay","_ref","content","className","formatContent","text","formatted","replace","dangerouslySetInnerHTML","__html"],"sources":["C:/Code/beedoo/src/components/RichTextDisplay.tsx"],"sourcesContent":["import React from 'react';\r\n\r\ninterface RichTextDisplayProps {\r\n  content: string;\r\n  className?: string;\r\n}\r\n\r\nconst RichTextDisplay: React.FC<RichTextDisplayProps> = ({ content, className = \"\" }) => {\r\n  // Simple function to convert plain text with basic formatting to HTML\r\n  const formatContent = (text: string): string => {\r\n    if (!text) return '';\r\n    \r\n    // Convert basic markdown-style formatting\r\n    let formatted = text\r\n      // Bold: **text** or __text__\r\n      .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\r\n      .replace(/__(.*?)__/g, '<strong>$1</strong>')\r\n      // Italic: *text* or _text_\r\n      .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\r\n      .replace(/_(.*?)_/g, '<em>$1</em>')\r\n      // Underline: ~text~\r\n      .replace(/~(.*?)~/g, '<u>$1</u>')\r\n      // URLs: convert to clickable links\r\n      .replace(/(https?:\\/\\/[^\\s]+)/g, '<a href=\"$1\" target=\"_blank\" rel=\"noopener noreferrer\" class=\"text-blue-600 underline hover:text-blue-800\">$1</a>')\r\n      // Line breaks\r\n      .replace(/\\n/g, '<br>');\r\n\r\n    return formatted;\r\n  };\r\n\r\n  return (\r\n    <div \r\n      className={className}\r\n      dangerouslySetInnerHTML={{ __html: formatContent(content) }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RichTextDisplay; "],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAO1B,KAAM,CAAAC,eAA+C,CAAGC,IAAA,EAAiC,IAAhC,CAAEC,OAAO,CAAEC,SAAS,CAAG,EAAG,CAAC,CAAAF,IAAA,CAClF;AACA,KAAM,CAAAG,aAAa,CAAIC,IAAY,EAAa,CAC9C,GAAI,CAACA,IAAI,CAAE,MAAO,EAAE,CAEpB;AACA,GAAI,CAAAC,SAAS,CAAGD,IACd;AAAA,CACCE,OAAO,CAAC,gBAAgB,CAAE,qBAAqB,CAAC,CAChDA,OAAO,CAAC,YAAY,CAAE,qBAAqB,CAC5C;AAAA,CACCA,OAAO,CAAC,YAAY,CAAE,aAAa,CAAC,CACpCA,OAAO,CAAC,UAAU,CAAE,aAAa,CAClC;AAAA,CACCA,OAAO,CAAC,UAAU,CAAE,WAAW,CAChC;AAAA,CACCA,OAAO,CAAC,sBAAsB,CAAE,mHAAmH,CACpJ;AAAA,CACCA,OAAO,CAAC,KAAK,CAAE,MAAM,CAAC,CAEzB,MAAO,CAAAD,SAAS,CAClB,CAAC,CAED,mBACEP,IAAA,QACEI,SAAS,CAAEA,SAAU,CACrBK,uBAAuB,CAAE,CAAEC,MAAM,CAAEL,aAAa,CAACF,OAAO,CAAE,CAAE,CAC7D,CAAC,CAEN,CAAC,CAED,cAAe,CAAAF,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}