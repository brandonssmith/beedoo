{"ast":null,"code":"const API_BASE_URL = process.env.NODE_ENV === 'production' ? '/api/tasks' : 'http://localhost:8888/.netlify/functions/tasks';\nexport class TaskService {\n  static async loadTasks() {\n    try {\n      const response = await fetch(API_BASE_URL, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to load tasks: ${response.statusText}`);\n      }\n      const tasks = await response.json();\n\n      // Convert date strings back to Date objects\n      const convertDates = taskList => {\n        return taskList.map(task => ({\n          ...task,\n          createdAt: new Date(task.createdAt),\n          updatedAt: new Date(task.updatedAt),\n          subtasks: convertDates(task.subtasks || []),\n          nextSteps: convertDates(task.nextSteps || [])\n        }));\n      };\n      return convertDates(tasks);\n    } catch (error) {\n      console.error('Error loading tasks:', error);\n      throw error;\n    }\n  }\n  static async saveTasks(tasks) {\n    try {\n      const response = await fetch(API_BASE_URL, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(tasks)\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to save tasks: ${response.statusText}`);\n      }\n      const result = await response.json();\n      console.log('Tasks saved successfully:', result);\n    } catch (error) {\n      console.error('Error saving tasks:', error);\n      throw error;\n    }\n  }\n  static async testConnection() {\n    try {\n      const response = await fetch(API_BASE_URL, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      return response.ok;\n    } catch (error) {\n      console.error('Connection test failed:', error);\n      return false;\n    }\n  }\n}","map":{"version":3,"names":["API_BASE_URL","process","env","NODE_ENV","TaskService","loadTasks","response","fetch","method","headers","ok","Error","statusText","tasks","json","convertDates","taskList","map","task","createdAt","Date","updatedAt","subtasks","nextSteps","error","console","saveTasks","body","JSON","stringify","result","log","testConnection"],"sources":["C:/Code/beedoo/src/services/taskService.ts"],"sourcesContent":["import { Task } from '../types/Task';\r\n\r\nconst API_BASE_URL = process.env.NODE_ENV === 'production' \r\n  ? '/api/tasks' \r\n  : 'http://localhost:8888/.netlify/functions/tasks';\r\n\r\nexport class TaskService {\r\n  static async loadTasks(): Promise<Task[]> {\r\n    try {\r\n      const response = await fetch(API_BASE_URL, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to load tasks: ${response.statusText}`);\r\n      }\r\n\r\n      const tasks = await response.json();\r\n      \r\n      // Convert date strings back to Date objects\r\n      const convertDates = (taskList: any[]): Task[] => {\r\n        return taskList.map(task => ({\r\n          ...task,\r\n          createdAt: new Date(task.createdAt),\r\n          updatedAt: new Date(task.updatedAt),\r\n          subtasks: convertDates(task.subtasks || []),\r\n          nextSteps: convertDates(task.nextSteps || []),\r\n        }));\r\n      };\r\n\r\n      return convertDates(tasks);\r\n    } catch (error) {\r\n      console.error('Error loading tasks:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async saveTasks(tasks: Task[]): Promise<void> {\r\n    try {\r\n      const response = await fetch(API_BASE_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(tasks),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Failed to save tasks: ${response.statusText}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('Tasks saved successfully:', result);\r\n    } catch (error) {\r\n      console.error('Error saving tasks:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async testConnection(): Promise<boolean> {\r\n    try {\r\n      const response = await fetch(API_BASE_URL, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n      return response.ok;\r\n    } catch (error) {\r\n      console.error('Connection test failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n} "],"mappings":"AAEA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,GACtD,YAAY,GACZ,gDAAgD;AAEpD,OAAO,MAAMC,WAAW,CAAC;EACvB,aAAaC,SAASA,CAAA,EAAoB;IACxC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACP,YAAY,EAAE;QACzCQ,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyBL,QAAQ,CAACM,UAAU,EAAE,CAAC;MACjE;MAEA,MAAMC,KAAK,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;;MAEnC;MACA,MAAMC,YAAY,GAAIC,QAAe,IAAa;QAChD,OAAOA,QAAQ,CAACC,GAAG,CAACC,IAAI,KAAK;UAC3B,GAAGA,IAAI;UACPC,SAAS,EAAE,IAAIC,IAAI,CAACF,IAAI,CAACC,SAAS,CAAC;UACnCE,SAAS,EAAE,IAAID,IAAI,CAACF,IAAI,CAACG,SAAS,CAAC;UACnCC,QAAQ,EAAEP,YAAY,CAACG,IAAI,CAACI,QAAQ,IAAI,EAAE,CAAC;UAC3CC,SAAS,EAAER,YAAY,CAACG,IAAI,CAACK,SAAS,IAAI,EAAE;QAC9C,CAAC,CAAC,CAAC;MACL,CAAC;MAED,OAAOR,YAAY,CAACF,KAAK,CAAC;IAC5B,CAAC,CAAC,OAAOW,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF;EAEA,aAAaE,SAASA,CAACb,KAAa,EAAiB;IACnD,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAACP,YAAY,EAAE;QACzCQ,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDkB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAChB,KAAK;MAC5B,CAAC,CAAC;MAEF,IAAI,CAACP,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,yBAAyBL,QAAQ,CAACM,UAAU,EAAE,CAAC;MACjE;MAEA,MAAMkB,MAAM,GAAG,MAAMxB,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACpCW,OAAO,CAACM,GAAG,CAAC,2BAA2B,EAAED,MAAM,CAAC;IAClD,CAAC,CAAC,OAAON,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb;EACF;EAEA,aAAaQ,cAAcA,CAAA,EAAqB;IAC9C,IAAI;MACF,MAAM1B,QAAQ,GAAG,MAAMC,KAAK,CAACP,YAAY,EAAE;QACzCQ,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,OAAOH,QAAQ,CAACI,EAAE;IACpB,CAAC,CAAC,OAAOc,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,OAAO,KAAK;IACd;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}