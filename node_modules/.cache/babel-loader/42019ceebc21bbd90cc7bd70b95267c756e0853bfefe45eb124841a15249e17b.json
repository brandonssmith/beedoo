{"ast":null,"code":"export const generateId = () => {\n  return Date.now().toString(36) + Math.random().toString(36).substr(2);\n};\nexport const parseTimeInput = timeInput => {\n  const hours = parseInt(timeInput.hours) || 0;\n  const minutes = parseInt(timeInput.minutes) || 0;\n  return hours * 60 + minutes;\n};\nexport const formatTime = minutes => {\n  const hours = Math.floor(minutes / 60);\n  const mins = minutes % 60;\n  if (hours === 0) {\n    return `${mins}m`;\n  } else if (mins === 0) {\n    return `${hours}h`;\n  } else {\n    return `${hours}h ${mins}m`;\n  }\n};\nexport const createTask = (formData, type, parentId) => {\n  const now = new Date();\n  return {\n    id: generateId(),\n    title: formData.title,\n    description: formData.description,\n    estimatedTime: formData.estimatedTime ? parseTimeInput({\n      hours: '0',\n      minutes: formData.estimatedTime\n    }) : undefined,\n    actualTime: undefined,\n    completed: false,\n    subtasks: [],\n    nextSteps: [],\n    createdAt: now,\n    updatedAt: now,\n    parentId,\n    type\n  };\n};\nexport const findTaskById = (tasks, id) => {\n  for (const task of tasks) {\n    if (task.id === id) return task;\n    const foundInSubtasks = findTaskById(task.subtasks, id);\n    if (foundInSubtasks) return foundInSubtasks;\n    const foundInNextSteps = findTaskById(task.nextSteps, id);\n    if (foundInNextSteps) return foundInNextSteps;\n  }\n  return null;\n};\nexport const updateTask = (tasks, id, updates) => {\n  return tasks.map(task => {\n    if (task.id === id) {\n      return {\n        ...task,\n        ...updates,\n        updatedAt: new Date()\n      };\n    }\n    return {\n      ...task,\n      subtasks: updateTask(task.subtasks, id, updates),\n      nextSteps: updateTask(task.nextSteps, id, updates)\n    };\n  });\n};\nexport const deleteTask = (tasks, id) => {\n  return tasks.filter(task => {\n    if (task.id === id) return false;\n    task.subtasks = deleteTask(task.subtasks, id);\n    task.nextSteps = deleteTask(task.nextSteps, id);\n    return true;\n  });\n};\nexport const addSubtask = (tasks, parentId, subtask) => {\n  return tasks.map(task => {\n    if (task.id === parentId) {\n      return {\n        ...task,\n        subtasks: [...task.subtasks, subtask],\n        updatedAt: new Date()\n      };\n    }\n    return {\n      ...task,\n      subtasks: addSubtask(task.subtasks, parentId, subtask),\n      nextSteps: addSubtask(task.nextSteps, parentId, subtask)\n    };\n  });\n};\nexport const addNextStep = (tasks, parentId, nextStep) => {\n  return tasks.map(task => {\n    if (task.id === parentId) {\n      return {\n        ...task,\n        nextSteps: [...task.nextSteps, nextStep],\n        updatedAt: new Date()\n      };\n    }\n    return {\n      ...task,\n      subtasks: addNextStep(task.subtasks, parentId, nextStep),\n      nextSteps: addNextStep(task.nextSteps, parentId, nextStep)\n    };\n  });\n};\nexport const calculateTaskStats = tasks => {\n  let totalTasks = 0;\n  let completedTasks = 0;\n  let totalEstimatedTime = 0;\n  let totalActualTime = 0;\n  const processTasks = taskList => {\n    taskList.forEach(task => {\n      totalTasks++;\n      if (task.completed) completedTasks++;\n      if (task.estimatedTime) totalEstimatedTime += task.estimatedTime;\n      if (task.actualTime) totalActualTime += task.actualTime;\n      processTasks(task.subtasks);\n      processTasks(task.nextSteps);\n    });\n  };\n  processTasks(tasks);\n  return {\n    totalTasks,\n    completedTasks,\n    totalEstimatedTime,\n    totalActualTime\n  };\n};\nexport const saveTasksToLocalStorage = tasks => {\n  localStorage.setItem('beedoo-tasks', JSON.stringify(tasks));\n};\nexport const loadTasksFromLocalStorage = () => {\n  const stored = localStorage.getItem('beedoo-tasks');\n  if (!stored) return [];\n  try {\n    const parsed = JSON.parse(stored);\n    // Convert date strings back to Date objects\n    const convertDates = taskList => {\n      return taskList.map(task => ({\n        ...task,\n        createdAt: new Date(task.createdAt),\n        updatedAt: new Date(task.updatedAt),\n        subtasks: convertDates(task.subtasks),\n        nextSteps: convertDates(task.nextSteps)\n      }));\n    };\n    return convertDates(parsed);\n  } catch (error) {\n    console.error('Error loading tasks from localStorage:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["generateId","Date","now","toString","Math","random","substr","parseTimeInput","timeInput","hours","parseInt","minutes","formatTime","floor","mins","createTask","formData","type","parentId","id","title","description","estimatedTime","undefined","actualTime","completed","subtasks","nextSteps","createdAt","updatedAt","findTaskById","tasks","task","foundInSubtasks","foundInNextSteps","updateTask","updates","map","deleteTask","filter","addSubtask","subtask","addNextStep","nextStep","calculateTaskStats","totalTasks","completedTasks","totalEstimatedTime","totalActualTime","processTasks","taskList","forEach","saveTasksToLocalStorage","localStorage","setItem","JSON","stringify","loadTasksFromLocalStorage","stored","getItem","parsed","parse","convertDates","error","console"],"sources":["C:/Code/beedoo/src/utils/taskUtils.ts"],"sourcesContent":["import { Task, TaskFormData, TimeInput, TaskStatistics } from '../types/Task';\r\n\r\nexport const generateId = (): string => {\r\n  return Date.now().toString(36) + Math.random().toString(36).substr(2);\r\n};\r\n\r\nexport const parseTimeInput = (timeInput: TimeInput): number => {\r\n  const hours = parseInt(timeInput.hours) || 0;\r\n  const minutes = parseInt(timeInput.minutes) || 0;\r\n  return hours * 60 + minutes;\r\n};\r\n\r\nexport const formatTime = (minutes: number): string => {\r\n  const hours = Math.floor(minutes / 60);\r\n  const mins = minutes % 60;\r\n  \r\n  if (hours === 0) {\r\n    return `${mins}m`;\r\n  } else if (mins === 0) {\r\n    return `${hours}h`;\r\n  } else {\r\n    return `${hours}h ${mins}m`;\r\n  }\r\n};\r\n\r\nexport const createTask = (formData: TaskFormData, type: Task['type'], parentId?: string): Task => {\r\n  const now = new Date();\r\n  return {\r\n    id: generateId(),\r\n    title: formData.title,\r\n    description: formData.description,\r\n    estimatedTime: formData.estimatedTime ? parseTimeInput({ hours: '0', minutes: formData.estimatedTime }) : undefined,\r\n    actualTime: undefined,\r\n    completed: false,\r\n    subtasks: [],\r\n    nextSteps: [],\r\n    createdAt: now,\r\n    updatedAt: now,\r\n    parentId,\r\n    type,\r\n  };\r\n};\r\n\r\nexport const findTaskById = (tasks: Task[], id: string): Task | null => {\r\n  for (const task of tasks) {\r\n    if (task.id === id) return task;\r\n    \r\n    const foundInSubtasks = findTaskById(task.subtasks, id);\r\n    if (foundInSubtasks) return foundInSubtasks;\r\n    \r\n    const foundInNextSteps = findTaskById(task.nextSteps, id);\r\n    if (foundInNextSteps) return foundInNextSteps;\r\n  }\r\n  return null;\r\n};\r\n\r\nexport const updateTask = (tasks: Task[], id: string, updates: Partial<Task>): Task[] => {\r\n  return tasks.map(task => {\r\n    if (task.id === id) {\r\n      return { ...task, ...updates, updatedAt: new Date() };\r\n    }\r\n    \r\n    return {\r\n      ...task,\r\n      subtasks: updateTask(task.subtasks, id, updates),\r\n      nextSteps: updateTask(task.nextSteps, id, updates),\r\n    };\r\n  });\r\n};\r\n\r\nexport const deleteTask = (tasks: Task[], id: string): Task[] => {\r\n  return tasks.filter(task => {\r\n    if (task.id === id) return false;\r\n    \r\n    task.subtasks = deleteTask(task.subtasks, id);\r\n    task.nextSteps = deleteTask(task.nextSteps, id);\r\n    return true;\r\n  });\r\n};\r\n\r\nexport const addSubtask = (tasks: Task[], parentId: string, subtask: Task): Task[] => {\r\n  return tasks.map(task => {\r\n    if (task.id === parentId) {\r\n      return {\r\n        ...task,\r\n        subtasks: [...task.subtasks, subtask],\r\n        updatedAt: new Date(),\r\n      };\r\n    }\r\n    \r\n    return {\r\n      ...task,\r\n      subtasks: addSubtask(task.subtasks, parentId, subtask),\r\n      nextSteps: addSubtask(task.nextSteps, parentId, subtask),\r\n    };\r\n  });\r\n};\r\n\r\nexport const addNextStep = (tasks: Task[], parentId: string, nextStep: Task): Task[] => {\r\n  return tasks.map(task => {\r\n    if (task.id === parentId) {\r\n      return {\r\n        ...task,\r\n        nextSteps: [...task.nextSteps, nextStep],\r\n        updatedAt: new Date(),\r\n      };\r\n    }\r\n    \r\n    return {\r\n      ...task,\r\n      subtasks: addNextStep(task.subtasks, parentId, nextStep),\r\n      nextSteps: addNextStep(task.nextSteps, parentId, nextStep),\r\n    };\r\n  });\r\n};\r\n\r\nexport const calculateTaskStats = (tasks: Task[]): TaskStatistics => {\r\n  let totalTasks = 0;\r\n  let completedTasks = 0;\r\n  let totalEstimatedTime = 0;\r\n  let totalActualTime = 0;\r\n\r\n  const processTasks = (taskList: Task[]) => {\r\n    taskList.forEach(task => {\r\n      totalTasks++;\r\n      if (task.completed) completedTasks++;\r\n      if (task.estimatedTime) totalEstimatedTime += task.estimatedTime;\r\n      if (task.actualTime) totalActualTime += task.actualTime;\r\n      \r\n      processTasks(task.subtasks);\r\n      processTasks(task.nextSteps);\r\n    });\r\n  };\r\n\r\n  processTasks(tasks);\r\n  \r\n  return {\r\n    totalTasks,\r\n    completedTasks,\r\n    totalEstimatedTime,\r\n    totalActualTime,\r\n  };\r\n};\r\n\r\nexport const saveTasksToLocalStorage = (tasks: Task[]): void => {\r\n  localStorage.setItem('beedoo-tasks', JSON.stringify(tasks));\r\n};\r\n\r\nexport const loadTasksFromLocalStorage = (): Task[] => {\r\n  const stored = localStorage.getItem('beedoo-tasks');\r\n  if (!stored) return [];\r\n  \r\n  try {\r\n    const parsed = JSON.parse(stored);\r\n    // Convert date strings back to Date objects\r\n    const convertDates = (taskList: any[]): Task[] => {\r\n      return taskList.map(task => ({\r\n        ...task,\r\n        createdAt: new Date(task.createdAt),\r\n        updatedAt: new Date(task.updatedAt),\r\n        subtasks: convertDates(task.subtasks),\r\n        nextSteps: convertDates(task.nextSteps),\r\n      }));\r\n    };\r\n    return convertDates(parsed);\r\n  } catch (error) {\r\n    console.error('Error loading tasks from localStorage:', error);\r\n    return [];\r\n  }\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}