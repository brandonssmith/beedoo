{"ast":null,"code":"export const calculateNoteStats=notes=>{const totalNotes=notes.length;// Get all unique tags\nconst allTags=new Set();notes.forEach(note=>{note.tags.forEach(tag=>allTags.add(tag));});const totalTags=allTags.size;// Calculate average notes per day (last 30 days)\nconst thirtyDaysAgo=new Date();thirtyDaysAgo.setDate(thirtyDaysAgo.getDate()-30);const recentNotes=notes.filter(note=>new Date(note.createdAt)>=thirtyDaysAgo);const averageNotesPerDay=totalNotes>0?recentNotes.length/30:0;return{totalNotes,totalTags,averageNotesPerDay:Math.round(averageNotesPerDay*100)/100};};export const searchNotes=(noteList,query)=>{if(!query.trim())return noteList;const searchLower=query.toLowerCase();return noteList.filter(note=>{const matchesTitle=note.title.toLowerCase().includes(searchLower);const matchesContent=note.content.toLowerCase().includes(searchLower);const matchesTags=note.tags.some(tag=>tag.toLowerCase().includes(searchLower));return matchesTitle||matchesContent||matchesTags;});};export const filterNotesByTag=(notes,tag)=>{if(!tag||tag==='all')return notes;return notes.filter(note=>note.tags.some(noteTag=>noteTag.toLowerCase()===tag.toLowerCase()));};export const getAllTags=notes=>{const allTags=new Set();notes.forEach(note=>{note.tags.forEach(tag=>allTags.add(tag));});return Array.from(allTags).sort();};","map":{"version":3,"names":["calculateNoteStats","notes","totalNotes","length","allTags","Set","forEach","note","tags","tag","add","totalTags","size","thirtyDaysAgo","Date","setDate","getDate","recentNotes","filter","createdAt","averageNotesPerDay","Math","round","searchNotes","noteList","query","trim","searchLower","toLowerCase","matchesTitle","title","includes","matchesContent","content","matchesTags","some","filterNotesByTag","noteTag","getAllTags","Array","from","sort"],"sources":["C:/Code/beedoo/src/utils/noteUtils.ts"],"sourcesContent":["import { Note, NoteStatistics } from '../types/Note';\r\n\r\nexport const calculateNoteStats = (notes: Note[]): NoteStatistics => {\r\n  const totalNotes = notes.length;\r\n  \r\n  // Get all unique tags\r\n  const allTags = new Set<string>();\r\n  notes.forEach(note => {\r\n    note.tags.forEach(tag => allTags.add(tag));\r\n  });\r\n  const totalTags = allTags.size;\r\n  \r\n  // Calculate average notes per day (last 30 days)\r\n  const thirtyDaysAgo = new Date();\r\n  thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n  \r\n  const recentNotes = notes.filter(note => \r\n    new Date(note.createdAt) >= thirtyDaysAgo\r\n  );\r\n  \r\n  const averageNotesPerDay = totalNotes > 0 ? (recentNotes.length / 30) : 0;\r\n  \r\n  return {\r\n    totalNotes,\r\n    totalTags,\r\n    averageNotesPerDay: Math.round(averageNotesPerDay * 100) / 100\r\n  };\r\n};\r\n\r\nexport const searchNotes = (noteList: Note[], query: string): Note[] => {\r\n  if (!query.trim()) return noteList;\r\n  \r\n  const searchLower = query.toLowerCase();\r\n  \r\n  return noteList.filter(note => {\r\n    const matchesTitle = note.title.toLowerCase().includes(searchLower);\r\n    const matchesContent = note.content.toLowerCase().includes(searchLower);\r\n    const matchesTags = note.tags.some(tag => \r\n      tag.toLowerCase().includes(searchLower)\r\n    );\r\n    \r\n    return matchesTitle || matchesContent || matchesTags;\r\n  });\r\n};\r\n\r\nexport const filterNotesByTag = (notes: Note[], tag: string): Note[] => {\r\n  if (!tag || tag === 'all') return notes;\r\n  \r\n  return notes.filter(note => \r\n    note.tags.some(noteTag => \r\n      noteTag.toLowerCase() === tag.toLowerCase()\r\n    )\r\n  );\r\n};\r\n\r\nexport const getAllTags = (notes: Note[]): string[] => {\r\n  const allTags = new Set<string>();\r\n  notes.forEach(note => {\r\n    note.tags.forEach(tag => allTags.add(tag));\r\n  });\r\n  return Array.from(allTags).sort();\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}