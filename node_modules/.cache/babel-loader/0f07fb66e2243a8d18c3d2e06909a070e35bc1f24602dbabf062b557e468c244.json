{"ast":null,"code":"const API_BASE_URL=process.env.NODE_ENV==='production'?'/.netlify/functions/notes':'http://localhost:8888/.netlify/functions/notes';export class NoteService{static async loadNotes(){try{console.log('=== LOADING NOTES ===');console.log('API URL:',API_BASE_URL);const response=await fetch(API_BASE_URL,{method:'GET',headers:{'Content-Type':'application/json'}});console.log('Load response status:',response.status,response.statusText);if(!response.ok){const errorText=await response.text();console.error('Server response:',errorText);throw new Error(`Failed to load notes: ${response.status} ${response.statusText}`);}const notes=await response.json();console.log('Raw notes from server:',notes);console.log('Notes count from server:',notes.length);// Convert date strings back to Date objects\nconst convertDates=noteList=>{return noteList.map(note=>({...note,createdAt:new Date(note.createdAt),updatedAt:new Date(note.updatedAt)}));};const convertedNotes=convertDates(notes);console.log('Converted notes:',convertedNotes);console.log('Converted notes count:',convertedNotes.length);return convertedNotes;}catch(error){console.error('Error loading notes:',error);throw error;}}static async saveNotes(notes){try{console.log('=== SAVING NOTES ===');console.log('API URL:',API_BASE_URL);console.log('Notes to save:',notes);console.log('Notes count:',notes.length);const response=await fetch(API_BASE_URL,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(notes)});console.log('Save response status:',response.status,response.statusText);console.log('Response headers:',Object.fromEntries(response.headers.entries()));if(!response.ok){const errorText=await response.text();console.error('Server error response:',errorText);throw new Error(`Failed to save notes: ${response.status} ${response.statusText} - ${errorText}`);}const result=await response.json();console.log('Notes saved successfully:',result);}catch(error){console.error('Error saving notes:',error);throw error;}}static async testConnection(){try{const response=await fetch(API_BASE_URL,{method:'GET',headers:{'Content-Type':'application/json'}});return response.ok;}catch(error){console.error('Connection test failed:',error);return false;}}}","map":{"version":3,"names":["API_BASE_URL","process","env","NODE_ENV","NoteService","loadNotes","console","log","response","fetch","method","headers","status","statusText","ok","errorText","text","error","Error","notes","json","length","convertDates","noteList","map","note","createdAt","Date","updatedAt","convertedNotes","saveNotes","body","JSON","stringify","Object","fromEntries","entries","result","testConnection"],"sources":["C:/Code/beedoo/src/services/noteService.ts"],"sourcesContent":["import { Note } from '../types/Note';\r\n\r\nconst API_BASE_URL = process.env.NODE_ENV === 'production' \r\n  ? '/.netlify/functions/notes' \r\n  : 'http://localhost:8888/.netlify/functions/notes';\r\n\r\nexport class NoteService {\r\n  static async loadNotes(): Promise<Note[]> {\r\n    try {\r\n      console.log('=== LOADING NOTES ===');\r\n      console.log('API URL:', API_BASE_URL);\r\n      \r\n      const response = await fetch(API_BASE_URL, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n\r\n      console.log('Load response status:', response.status, response.statusText);\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error('Server response:', errorText);\r\n        throw new Error(`Failed to load notes: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      const notes = await response.json();\r\n      console.log('Raw notes from server:', notes);\r\n      console.log('Notes count from server:', notes.length);\r\n      \r\n      // Convert date strings back to Date objects\r\n      const convertDates = (noteList: any[]): Note[] => {\r\n        return noteList.map(note => ({\r\n          ...note,\r\n          createdAt: new Date(note.createdAt),\r\n          updatedAt: new Date(note.updatedAt),\r\n        }));\r\n      };\r\n\r\n      const convertedNotes = convertDates(notes);\r\n      console.log('Converted notes:', convertedNotes);\r\n      console.log('Converted notes count:', convertedNotes.length);\r\n      \r\n      return convertedNotes;\r\n    } catch (error) {\r\n      console.error('Error loading notes:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async saveNotes(notes: Note[]): Promise<void> {\r\n    try {\r\n      console.log('=== SAVING NOTES ===');\r\n      console.log('API URL:', API_BASE_URL);\r\n      console.log('Notes to save:', notes);\r\n      console.log('Notes count:', notes.length);\r\n      \r\n      const response = await fetch(API_BASE_URL, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(notes),\r\n      });\r\n\r\n      console.log('Save response status:', response.status, response.statusText);\r\n      console.log('Response headers:', Object.fromEntries(response.headers.entries()));\r\n\r\n      if (!response.ok) {\r\n        const errorText = await response.text();\r\n        console.error('Server error response:', errorText);\r\n        throw new Error(`Failed to save notes: ${response.status} ${response.statusText} - ${errorText}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('Notes saved successfully:', result);\r\n    } catch (error) {\r\n      console.error('Error saving notes:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  static async testConnection(): Promise<boolean> {\r\n    try {\r\n      const response = await fetch(API_BASE_URL, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      });\r\n      return response.ok;\r\n    } catch (error) {\r\n      console.error('Connection test failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n} "],"mappings":"AAEA,KAAM,CAAAA,YAAY,CAAGC,OAAO,CAACC,GAAG,CAACC,QAAQ,GAAK,YAAY,CACtD,2BAA2B,CAC3B,gDAAgD,CAEpD,MAAO,MAAM,CAAAC,WAAY,CACvB,YAAa,CAAAC,SAASA,CAAA,CAAoB,CACxC,GAAI,CACFC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC,CACpCD,OAAO,CAACC,GAAG,CAAC,UAAU,CAAEP,YAAY,CAAC,CAErC,KAAM,CAAAQ,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACT,YAAY,CAAE,CACzCU,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CAEFL,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEC,QAAQ,CAACI,MAAM,CAAEJ,QAAQ,CAACK,UAAU,CAAC,CAE1E,GAAI,CAACL,QAAQ,CAACM,EAAE,CAAE,CAChB,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CACvCV,OAAO,CAACW,KAAK,CAAC,kBAAkB,CAAEF,SAAS,CAAC,CAC5C,KAAM,IAAI,CAAAG,KAAK,CAAC,yBAAyBV,QAAQ,CAACI,MAAM,IAAIJ,QAAQ,CAACK,UAAU,EAAE,CAAC,CACpF,CAEA,KAAM,CAAAM,KAAK,CAAG,KAAM,CAAAX,QAAQ,CAACY,IAAI,CAAC,CAAC,CACnCd,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAEY,KAAK,CAAC,CAC5Cb,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAEY,KAAK,CAACE,MAAM,CAAC,CAErD;AACA,KAAM,CAAAC,YAAY,CAAIC,QAAe,EAAa,CAChD,MAAO,CAAAA,QAAQ,CAACC,GAAG,CAACC,IAAI,GAAK,CAC3B,GAAGA,IAAI,CACPC,SAAS,CAAE,GAAI,CAAAC,IAAI,CAACF,IAAI,CAACC,SAAS,CAAC,CACnCE,SAAS,CAAE,GAAI,CAAAD,IAAI,CAACF,IAAI,CAACG,SAAS,CACpC,CAAC,CAAC,CAAC,CACL,CAAC,CAED,KAAM,CAAAC,cAAc,CAAGP,YAAY,CAACH,KAAK,CAAC,CAC1Cb,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAEsB,cAAc,CAAC,CAC/CvB,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAEsB,cAAc,CAACR,MAAM,CAAC,CAE5D,MAAO,CAAAQ,cAAc,CACvB,CAAE,MAAOZ,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAC5C,KAAM,CAAAA,KAAK,CACb,CACF,CAEA,YAAa,CAAAa,SAASA,CAACX,KAAa,CAAiB,CACnD,GAAI,CACFb,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC,CACnCD,OAAO,CAACC,GAAG,CAAC,UAAU,CAAEP,YAAY,CAAC,CACrCM,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAEY,KAAK,CAAC,CACpCb,OAAO,CAACC,GAAG,CAAC,cAAc,CAAEY,KAAK,CAACE,MAAM,CAAC,CAEzC,KAAM,CAAAb,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACT,YAAY,CAAE,CACzCU,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDoB,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACd,KAAK,CAC5B,CAAC,CAAC,CAEFb,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEC,QAAQ,CAACI,MAAM,CAAEJ,QAAQ,CAACK,UAAU,CAAC,CAC1EP,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAE2B,MAAM,CAACC,WAAW,CAAC3B,QAAQ,CAACG,OAAO,CAACyB,OAAO,CAAC,CAAC,CAAC,CAAC,CAEhF,GAAI,CAAC5B,QAAQ,CAACM,EAAE,CAAE,CAChB,KAAM,CAAAC,SAAS,CAAG,KAAM,CAAAP,QAAQ,CAACQ,IAAI,CAAC,CAAC,CACvCV,OAAO,CAACW,KAAK,CAAC,wBAAwB,CAAEF,SAAS,CAAC,CAClD,KAAM,IAAI,CAAAG,KAAK,CAAC,yBAAyBV,QAAQ,CAACI,MAAM,IAAIJ,QAAQ,CAACK,UAAU,MAAME,SAAS,EAAE,CAAC,CACnG,CAEA,KAAM,CAAAsB,MAAM,CAAG,KAAM,CAAA7B,QAAQ,CAACY,IAAI,CAAC,CAAC,CACpCd,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAE8B,MAAM,CAAC,CAClD,CAAE,MAAOpB,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAAC,CAC3C,KAAM,CAAAA,KAAK,CACb,CACF,CAEA,YAAa,CAAAqB,cAAcA,CAAA,CAAqB,CAC9C,GAAI,CACF,KAAM,CAAA9B,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACT,YAAY,CAAE,CACzCU,MAAM,CAAE,KAAK,CACbC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CACF,CAAC,CAAC,CACF,MAAO,CAAAH,QAAQ,CAACM,EAAE,CACpB,CAAE,MAAOG,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,yBAAyB,CAAEA,KAAK,CAAC,CAC/C,MAAO,MAAK,CACd,CACF,CACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}